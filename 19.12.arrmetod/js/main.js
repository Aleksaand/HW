// Исходный массив
const arr = [5, 23, -110, 3, 18, 0, 14];
console.log(arr);
// Задание. Вывести в консоль только нечетные числа.
// Создаем новый массив и помощью метода фильтр наполняем его элементами
// которые удовлетворяют условию item % 2 !== 0
const arrEvenNum = arr.filter((item)=>{
    return item % 2 !== 0
});
// Выводим в консоль массив с чётными числами
console.log(arrEvenNum);

// Задание. Вывести в консоль массив, каждая ячейка которого будет увеличена на 20
// Создаем новый массив и помощью метода мап каждый элемент увеличиваем на  20
const arrPlusNum = arr.map(item => item + 20);
// Выводим в консоль массив со всеми элементами значение увеличеное на 20.
console.log(arrPlusNum);

// Задание. Вывести в консоль массив, состоящий только из положительных нечетных чисел
// Создаем новый массив и помощью метода фильтр наполняем его элементами которые удовлетворяют сразу двум условиям
// 1-е айтем больше 0 и 2-е остаток от деления на 2 равен 0.
const arrPositiveOdd = arr.filter((item) => {
  if (item > 0 && item % 2 !== 0) {
    return item
  }
});
// Выводим в консоль массив с чётными числами которые больше 0
console.log(arrPositiveOdd);

// Задание. Проверить, и вывести в консоль результат проверки, есть ли в массиве число 5.
// Используем метод includes. Возвращает два значения есть или нет элемент переданый аргументом
const arrCheckNum = arr.includes(5);
console.log(`arrCheckNum: ${arrCheckNum}, typeof:${typeof(arrCheckNum)}`);

// Задание. Вывести в консоль сумму остатков от целочисленных делений на 3 каждой ячейки.
// метод reduce собирает(складывает, схлопывает) какое-то действие от всех элементов массива
// !!!Важно !!! где передан 0. передать начальное значение аккумулятора с тем-же типом данных.
const newSumDevisonNum = arr.reduce((sum, current) => sum + current % 3, 0);
// Выводим в консоль сумму остатков от деления на 3.
console.log('newSumDevisonNum:', newSumDevisonNum);

// Задание.Определить, есть ли в массиве числа, кратные 5.
// метод some возвращает булиновое значение проверяет, 
// удовлетворяет ли какой-либо элемент массива условию, заданному в передаваемой функции.
const someEl = arr.some((val) => {
  if (val % 5 === 0) {
    return val;
  }
});
console.log(typeof(someEl),someEl);
// Задание. Отсортировать массив по возрастанию, вывести в консоль. 
// Метод sort() на месте сортирует элементы массива и возвращает отсортированный массив.
// Порядок cортировки по умолчанию соответствует порядку кодовых точек Unicode.
// Function
// Необязательный параметр. Указывает функцию, определяющую порядок 
// сортировки. Если опущен, массив сортируется в соответствии со значениями 
// кодовых точек каждого символа Unicode, 
//полученных путём преобразования каждого элемента в строку.
const sortArrayUnicode = arr.sort();
console.log(sortArrayUnicode);
// -110,  0, 14, 18, 23,  3, 5 сортировка по юникоду.
// для сортировки по возрастанию нужно передать функцию
const sortArrayarrIncrease = arr.sort(function(a, b) {
  return a - b ;
}
);
// сортировка по возрастанию
console.log(sortArrayarrIncrease); 
// сортировка по убыванию
 const sortArrayarrDecrease = arr.sort(function(a, b) {
  return b - a ;
}
);
console.log(sortArrayarrDecrease); 